import os
from os import path
import sys
from pkg_resources import parse_version

import SCons
from SCons.Script import (Environment, Variables, Help, Decider, Depends, Dir)
from bioscons.fileutils import rename

import common

# Ensure that a virtualenv is active before importing non-stdlib dependencies.
venv = os.environ.get('VIRTUAL_ENV')
if not venv:
    sys.exit('--> an active virtualenv is required'.format(venv))

# TODO: move to bioscons
min_scons_version = '3.0.1'
if parse_version(SCons.__version__) < parse_version(min_scons_version):
    sys.exit('requires scons version {} (found {})'.format(min_scons_version, SCons.__version__))

# check timestamps before calculating md5 checksums
Decider('MD5-timestamp')

# ############### start inputs ################
user_args, conf = common.get_conf('settings.conf')

outdir = conf['get_data'].get('outdir', 'dada2')
plates = conf['get_data'].get('plates', '').strip().split()
assert bool(plates), 'must provide a value for conf["get_data"]["plates"]'
projects = conf['get_data'].get('projects', '').strip().split()
refpkg = conf['get_data'].get('refpkg')

miseq_data = '/fh/fast/fredricks_d/bvdiversity/data'
sample_info = [path.join(miseq_data, plate, 'dada2', 'sample_info.csv')
               for plate in plates]

singularity = conf['singularity'].get('singularity', 'singularity')
dada2_img = conf['singularity']['dada2']
binds = [os.path.abspath(pth)
         for pth in conf['singularity']['binds'].strip().splitlines()]

# ############### end inputs ##################

vars = Variables()
vars.Add('out', '', outdir)
env = Environment(
    ENV=dict(
        os.environ,
        PATH=':'.join([
            'bin', path.join(venv, 'bin'),
            '/usr/local/bin', '/usr/bin', '/bin']
        )),
    variables=vars,
    SHELL='bash',
    cwd=os.getcwd(),
    singularity=singularity,
    binds=' '.join('-B {}'.format(pth) for pth in ['$cwd'] + binds),
    dada2_img=('$singularity exec $binds --pwd $cwd {}'.format(dada2_img)),
)

Help(vars.GenerateHelpText(env))

sample_info_files = env.Command(
    target='$out/sample_info_list.txt',
    source=sample_info,
    action='ls $SOURCES > $TARGET'
)

sample_info = env.Command(
    target='$out/sample_info.csv',
    source=sample_info_files,
    action=('csvstack --groups $$(echo -n $$(cat $SOURCE) | tr " " ",") '
            '--group-name path '
            '$$(cat $SOURCE) > $TARGET')
)

write_seqs_action = (
    '$dada2_img bin/dada2_write_seqs.R $SOURCE '
    '--seqs ${TARGETS[0]} '
    '--sv-table ${TARGETS[1]} '
    '--weights ${TARGETS[2]} '
    '--specimen-map ${TARGETS[3]} '
    '--sv-table-long ${TARGETS[4]} '
)

if projects:
    write_seqs_action += '--projects "{}"'.format(','.join(projects))

sv_fa, sv_table, weight, specimen_map, sv_table_long = env.Command(
    target=['$out/seqs.fasta',
            '$out/dada2_sv_table.csv',
            '$out/weights.csv',
            '$out/specimen_map.csv',
            '$out/dada2_sv_table_long.csv'],
    source=sample_info,
    action=write_seqs_action
)
Depends(sv_fa, 'bin/dada2_write_seqs.R')

local_refpkg = env.Command(
    target=Dir(rename(refpkg, pth='.')),
    source=refpkg,
    action='cp -r $SOURCE $TARGET'
)
