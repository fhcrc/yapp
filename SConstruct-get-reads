import os
from os import path
import sys

# Ensure that a virtualenv is active before importing non-stdlib dependencies.
venv = os.environ.get('VIRTUAL_ENV')
if not venv:
    sys.exit('--> an active virtualenv is required'.format(venv))

from SCons.Script import (Environment, Variables, Help, Decider)

# check timestamps before calculating md5 checksums
Decider('MD5-timestamp')

# Define some PATH elements explicitly.
PATH=':'.join([
    'bin',
    path.join(venv, 'bin'),
    '/app/bin',  # provides R
    '/usr/local/bin', '/usr/bin', '/bin'])

vars = Variables()
vars.Add('out', '', 'dada2')
vars.Add('nproc', 'Number of concurrent processes', default=12)

# Provides access to options prior to instantiation of env object
# below; it's better to access variables through the env object.
varargs = dict({opt.key: opt.default for opt in vars.options}, **vars.args)
truevals = {True, 'yes', 'y', 'True', 'true', 't'}

# define boolean variables like
# varname = varargs['varname'] in truevals

# SHELLOPTS sets shell options to fail (including piped commands) with
# nonzero exit status; this requires bash.
env = Environment(
    ENV=dict(os.environ, PATH=PATH, SHELLOPTS='errexit:pipefail'),
    variables=vars,
    SHELL='bash'
)

Help(vars.GenerateHelpText(env))

# ############### start inputs ################

# ############### end inputs ##################

projects = ['trichomonas']

sample_info_files = env.Command(
    target='$out/sample_info_list.txt',
    source=None,
    action='ls /fh/fast/fredricks_d/bvdiversity/data/miseq-plate-*/dada2/sample_info.csv > $TARGET'
)

sample_info = env.Command(
    target='$out/sample_info.csv',
    source=sample_info_files,
    action=('csvstack --groups $$(echo -n $$(cat $SOURCE) | tr " " ",") '
            '--group-name path '
            '$$(cat $SOURCE) | '
            "csvgrep -c project -r '%s' > $TARGET") % '|'.join(projects)
)

sv_fa, sv_table, weight, specimen_map, sv_table_long = env.Command(
    target=['$out/seqs.fasta', '$out/dada2_sv_table.csv',
            '$out/weights.csv', '$out/specimen_map.csv',
            '$out/dada2_sv_table_long.csv'],
    source=sample_info,
    action=('dada2_write_seqs.R $SOURCE '
            '--seqs ${TARGETS[0]} '
            '--sv-table ${TARGETS[1]} '
            '--weights ${TARGETS[2]} '
            '--specimen-map ${TARGETS[3]} '
            '--sv-table-long ${TARGETS[4]} ')
)
