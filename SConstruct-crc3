"""
Export data for CCR-3 project as a phyloseq object
"""

import os
import sys
import ConfigParser
from os import path, environ
import csv
from collections import namedtuple

venv = environ.get('VIRTUAL_ENV')
if not venv:
    sys.exit('--> an active virtualenv is required'.format(venv))

# requirements installed in the virtualenv
from SCons.Script import (
    ARGUMENTS, Variables, Decider, Depends, EnumVariable,
    PathVariable, Help, BoolVariable, Precious, Dir)

from bioscons.fileutils import Targets
from bioscons.slurm import SlurmEnvironment


def cmalign_files(target, source, env):
    from deenurp import util, wrap
    from Bio import SeqIO

    with util.ntf(suffix='.sto') as a_sto:
        wrap.cmalign_files(str(source[0]), a_sto.name, cpu=4)
        SeqIO.convert(a_sto, 'stockholm', str(target[0]), 'fasta')


def fastalite(handle):
    """Return a sequence of namedtuple objects with attributes (id,
    description, seq) given open file-like object ``handle``

    """

    Seq = namedtuple('Seq', 'id, description, seq')

    header, seq = '', []
    for line in handle:
        if line.startswith('>'):
            if header:
                yield Seq(header.split()[0], header, ''.join(seq))
            header, seq = line[1:].strip(), []
        else:
            seq.append(line.strip())

    if header and seq:
        yield Seq(header.split()[0], header, ''.join(seq))


# check timestamps before calculating md5 checksums
Decider('MD5-timestamp')

vars = Variables()

# declare variables for the environment
vars.Add(PathVariable('out', 'Path to output directory',
                      'output-crc3', PathVariable.PathIsDirCreate))
vars.Add('nproc', 'Number of concurrent processes', default=20)

# Provides access to options prior to instantiation of env object
# below; it's better to access variables through the env object.
varargs = dict({opt.key: opt.default for opt in vars.options}, **vars.args)
truevals = {True, 'yes', 'y', 'True', 'true', 't'}
nproc = varargs['nproc']

"""#####################################################################
########################  input data  ##################################
#####################################################################"""

sample_info_xlsx = '/fh/fast/fredricks_d/bvdiversity/data/miseq-plate-12-0mm/sample-information/sample-information-m12-0mm.xlsx'
seed_seqs = '/fh/fast/fredricks_d/bvdiversity/data/miseq-plate-12-0mm/dada2/seeds.fasta'
specimen_map = '/fh/fast/fredricks_d/bvdiversity/data/miseq-plate-12-0mm/dada2/specimen_map.csv'
refpkg = 'data/manhart_named-2016-09-12.refpkg'

data_dir = 'output'


"""#####################################################################
#########################  end input data  #############################
#####################################################################"""

# Explicitly define PATH, giving preference to local executables; it's
# best to use absolute paths for non-local executables rather than add
# paths here to avoid accidental introduction of external
# dependencies. Environment variables are inherited from the parent
# shell from which scons is run.

environment_variables = dict(
    os.environ,
    PATH=':'.join([
        'bin',
        path.join(venv, 'bin'),
        '/app/bin',  # provides R
        '/usr/local/bin', '/usr/bin', '/bin']),
    OMP_NUM_THREADS=nproc,
    R_LIBS_USER=path.join(path.split(venv)[0], 'R', 'R.%v-library'))

env = SlurmEnvironment(
    ENV=environment_variables,
    variables=vars,
    use_cluster=False,
    SHELL='bash'
)

# extract sample info, limiting to this study
sample_info = env.Command(
    target='$out/sample_info.csv',
    source=sample_info_xlsx,
    action=('in2csv $SOURCE | '
            'csvgrep -c project -m CRC3 | '
            'csvgrep -c excluded -m No > $TARGET')
)

# extract the relevant subset of seed sequences
def get_seeds(target, source, env):
    sample_info, specimen_map, fasta = source

    with open(str(sample_info)) as f:
        specimens = {row['sampleid'] for row in csv.DictReader(f)}

    with open(str(specimen_map)) as f:
        otus = {read.split(':')[0]
                for read, specimen in csv.reader(f) if specimen in specimens}

    with open(str(fasta)) as f, open(str(target[0]), 'w') as o:
        for seq in fastalite(f):
            if seq.id.split(':')[0] in otus:
                o.write('>{}\n{}\n'.format(seq.id, seq.seq))


seeds_fasta = env.Command(
    target='$out/seeds.fasta',
    source=[sample_info, specimen_map, seed_seqs],
    action=get_seeds
)

seeds_sto, cmscores, seeds_aln_fasta = env.Command(
    target=['$out/seeds_aln.sto', '$out/seeds_cmscores.txt', '$out/seeds_aln.fasta'],
    source=[refpkg, seeds_fasta],
    action=('cmalign '
            '--cpu $nproc '
            '-o ${TARGETS[0]} '
            '--sfile ${TARGETS[1]} '
            '--noprob --dnaout '
            '$$(taxit rp ${SOURCES[0]} profile) ${SOURCES[1]} && '
            'seqmagick convert '
            '--squeeze '
            '--apply-function bin/seqmagick_extensions.py:replace_dots '
            '${TARGETS[0]} ${TARGETS[2]}'
    ))

# specify OMP_NUM_THREADS=$ncores in environment
seeds_tree = env.Command(
    target='$out/seeds.tre',
    source=seeds_aln_fasta,
    action='FastTreeMP -nt -gtr $SOURCE > $TARGET'
)

# write a report and generate data
phyloseq_report = env.Command(
    target=['$out/CRC3-phyloseq.html', '$out/CRC3-phyloseq.rda'],
    source=['CRC3-phyloseq.Rmd',
            sample_info,
            seeds_tree,
            'output/multiclass_concat.csv',
            '/fh/fast/fredricks_d/bvdiversity/data/miseq-plate-12-0mm/dada2/dada2_otu_table.csv',
    ],
    action=('PATH=/home/matsengrp/local/bin:$$PATH knit.R ${SOURCES[0]} '
            '-o ${TARGETS[0]} '
            '-e "'
            '--annotation ${SOURCES[1]} '
            '--tree ${SOURCES[2]} '
            '--classifications ${SOURCES[3]} '
            '--otu-tab ${SOURCES[4]} '
            '--rda ${TARGETS[1]} '
            '"')
)
