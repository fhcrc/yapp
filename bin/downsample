#!/usr/bin/env python3

"""Extract a subset of sequences partitioned by specimen.

"""

import os
import sys
import argparse
import collections
from itertools import chain, islice, repeat, izip
import csv

from Bio import SeqIO

def main(arguments):

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('seqs', type=argparse.FileType('r'))
    parser.add_argument('seq_info', type=argparse.FileType('r'))
    parser.add_argument('seqs_out', type=argparse.FileType('w'))
    parser.add_argument('seq_info_out', type=argparse.FileType('w'))
    parser.add_argument('-N', type=int, help='keep the first NUMBER per specimen',
                        default=50, metavar='NUMBER')
    args = parser.parse_args(arguments)

    # Load the sequence map
    specimens = collections.defaultdict(list)
    for seqname, specimen in csv.reader(args.seq_info):
        specimens[specimen].append(seqname)

    # keep the first N records for each specimen
    rows = list(chain.from_iterable(izip(islice(names, args.N), repeat(specimen))
                               for specimen, names in specimens.items()))

    keep = set(name for name, _ in rows)

    # downsampled seq_info
    csv.writer(args.seq_info_out).writerows(rows)

    # downsampled seqs
    seqs = (seq for seq in SeqIO.parse(args.seqs, 'fasta') if seq.id in keep)
    SeqIO.write(seqs, args.seqs_out, 'fasta')


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
